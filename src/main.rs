#![cfg_attr(debug_assertions, allow(dead_code))]

use rand::Rng;
#[macro_use]
extern crate timeit;

// ================================== UTILS ==================================

fn add_binary(b1: &str, b2: &str) -> String {
    // this function takes two string representing two binaries, transform them into
    // a vector of boolean; call the add function and transform back the result into
    // a string
    let res = add_binary_par(&cast_binary(b1), &cast_binary(b2), b1.len() - 4).1;
    return res.iter().map(|x| if *x {'1'} else {'0'}).rev().collect();
}

fn cast_binary(binary_str: &str) -> Vec<bool> {
    // transform the binary string into a vec of bolean, in reversed order
    return binary_str.chars().map(|x| x == '1').rev().collect();
}

fn random_binary(n: usize) -> Vec<bool> {
    let mut rng = rand::thread_rng();
    return std::iter::repeat_with(|| rng.gen::<bool>()).take(n).collect();
}

// ================================ ALGORITHMS ================================

/*fn add_binary_seq(b1: Vec<bool>, b2: Vec<bool>) -> (bool, Vec<bool>) {
    // this is the sequential algorithm for binary of different sizes
    // I decided to stick with binaries of equal length anyway
    return b1.iter().zip_longest(b2.iter()).map(|pair|
        match pair {
            Both(l, r) => (l, r),
            Left(l)    => (l, &false),
            Right(r)   => (&false, r)
        }
    ).fold((false, vec![]), |mut acc, curr| {
        let carry = acc.0;
        acc.0 = (carry as u8 + *curr.0 as u8 + *curr.1 as u8) > 1;
        acc.1.push(((carry as u8 + *curr.0 as u8 + *curr.1 as u8)%2) == 1);
        acc
    });
}*/

fn add_binary_seq(b1: &Vec<bool>, b2: &Vec<bool>) -> (bool, Vec<bool>) {
    return b1.iter().zip(b2.iter()).fold((false, vec![]), |mut acc, curr| {
        let carry = acc.0;
        acc.0 = (carry as u8 + *curr.0 as u8 + *curr.1 as u8) > 1;
        acc.1.push(((carry as u8 + *curr.0 as u8 + *curr.1 as u8)%2) == 1);
        acc
    });
}

fn add_binary_par(b1: &Vec<bool>, b2: &Vec<bool>, barrier: usize)
        -> (bool, Vec<bool>) {
    let b1len = b1.len();
    let b2len = b2.len();

    // PARALLEL
    if b1len > 1<<barrier && b2len > 1<<barrier {
        let (b1g, b1d) = b1.split_at(b1len/2);
        let (b2g, b2d) = b2.split_at(b2len/2);

        // splitting in two parts
        let ((c1, mut r1), (c2, r2)) = rayon::join(
            || add_binary_par(&b1g.to_vec(), &b2g.to_vec(), barrier),
            || add_binary_par(&b1d.to_vec(), &b2d.to_vec(), barrier)
        );

        // merging of the results
        let (c3, mut r3) = add_carry(r2, c1);
        r1.append(&mut r3);

        return (c2 || c3, r1);
    }

    // SEQUENTIAL
    return add_binary_seq(&b1, &b2);
}

fn add_carry(mut binary: Vec<bool>, carry: bool) -> (bool, Vec<bool>) {
    // add the carry (can be 0) to the binary
    // since the number are random, and thus having early 0s,
    // this algorithm should be O(1)
    if !carry {
        return (false, binary);
    }
    for i in 0..binary.len() {
        binary[i] = !binary[i];
        if binary[i] {
            return (false, binary);
        }
    }
    return (true, binary);
}

// =================================== MAIN ===================================

fn main() {
	let shift = 6;
    let n = 1 << shift;
    let barrier = shift - 4;

    let v1 = random_binary(n);
    let v2 = random_binary(n);

    println!(">>> Timing sequential algorithm");
    println!("{}", timeit_loops!(1000, {
        add_binary_seq(&v1, &v2);
    }));

    println!(">>> Timing parrallel algorithm");
    println!("{}", timeit_loops!(1000, {
        add_binary_par(&v1, &v2, barrier);
    }));
    

/*    println!(">>> Drawing the tracer graph");
    fast_tracer::svg("binary-add.svg", || {
        add_binary_par(&v1, &v2, barrier);
    })
    .expect("failed saving svg file");*/
}

// =================================== TESTS ===================================

#[cfg(test)]
mod tests {
    use crate::cast_binary;
    use crate::add_binary_seq;
    use crate::add_binary_par;

    #[test]
    fn zero_plus_zero_seq() {
        let b1 = cast_binary("00000000");
        let b2 = cast_binary("00000000");
        let res = cast_binary("00000000");
        assert_eq!(add_binary_seq(&b1, &b2).1, res);
    }

    #[test]
    fn eight_bits_seq() {
        let b1 = cast_binary("11001100");
        let b2 = cast_binary("11001100");
        let res = cast_binary("10011000");
        assert_eq!(add_binary_seq(&b1, &b2).1, res);
    }

    #[test]
    fn eight_bits_2_seq() {
        let b1 = cast_binary("11111111");
        let b2 = cast_binary("11111111");
        let res = cast_binary("11111110");
        assert_eq!(add_binary_seq(&b1, &b2).1, res);
    }

    #[test]
    fn larger_seq() {
        let b1 = cast_binary("0010110000001110");
        let b2 = cast_binary("0110001100100011");
        let res = cast_binary("1000111100110001");
        assert_eq!(add_binary_seq(&b1, &b2).1, res);
    }

    #[test]
    fn largest_seq() {
        let b1 = cast_binary
        let b2 = cast_binary
        let res = cast_binary
        assert_eq!(add_binary_seq(&b1, &b2).1, res);
    }

    #[test]
    fn zero_plus_zero_par() {
        let b1 = cast_binary("00000000");
        let b2 = cast_binary("00000000");
        let res = cast_binary("00000000");
        assert_eq!(add_binary_par(&b1, &b2, 8).1, res);
    }

    #[test]
    fn eight_bits_par() {
        let b1 = cast_binary("11001100");
        let b2 = cast_binary("11001100");
        let res = cast_binary("10011000");
        assert_eq!(add_binary_par(&b1, &b2, 8).1, res);
    }

    #[test]
    fn eight_bits_2_par() {
        let b1 = cast_binary("11111111");
        let b2 = cast_binary("11111111");
        let res = cast_binary("11111110");
        assert_eq!(add_binary_par(&b1, &b2, 8).1, res);
    }

    #[test]
    fn larger_par() {
        let b1 = cast_binary("0010110000001110");
        let b2 = cast_binary("0110001100100011");
        let res = cast_binary("1000111100110001");
        assert_eq!(add_binary_par(&b1, &b2, 8).1, res);
    }

    #[test]
    fn largest_par() {
        let b1 = cast_binary
        let b2 = cast_binary
        let res = cast_binary
        assert_eq!(add_binary_par(&b1, &b2, 12).1, res);
    }
}
